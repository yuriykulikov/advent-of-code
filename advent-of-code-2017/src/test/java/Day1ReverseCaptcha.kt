import org.assertj.core.api.Assertions.assertThat
import org.junit.Test

class Day1ReverseCaptcha {
    private fun sumOfMatching(s: String): Int {
        return s
            .asSequence()
            .fold(0 to s.last()) { (sum, prev), next ->
                (if (next == prev) sum + next.toString().toInt() else sum) to next
            }
            .first
    }

    // 1122 produces a sum of 3 (1 + 2) because the first digit (1) matches the second digit and the third digit (2) matches the fourth digit.
    @Test
    fun `sum of matching 1122 is 3`() {
        assertThat(sumOfMatching("1122")).isEqualTo(3)
    }

    // 1111 produces 4 because each digit (all 1) matches the next.
    @Test
    fun `sum of matching 1111 is 4`() {
        assertThat(sumOfMatching("1111")).isEqualTo(4)
    }

    // 1234 produces 0 because no digit matches the next.
    @Test
    fun `sum of matching 1234 is 0`() {
        assertThat(sumOfMatching("1234")).isEqualTo(0)
    }

    // 91212129 produces 9 because the only digit that matches the next one is the last digit, 9.
    @Test
    fun `sum of matching 91212129 is 9`() {
        assertThat(sumOfMatching("91212129")).isEqualTo(9)
    }

    @Test
    fun `sum of matching testInput is 1390`() {
        assertThat(sumOfMatching(testInput)).isEqualTo(1390)
    }

    private fun String.aroundTheHalf(index: Int): Char {
        val stepHalfAround = length / 2 + index
        val loopedStepHalfAround = if (stepHalfAround > lastIndex) stepHalfAround - length else stepHalfAround
        return this[loopedStepHalfAround]
    }

    private fun sumOfMatchingAround(s: String): Int {
        return s.filterIndexed { index, next ->
            next == s.aroundTheHalf(index)
        }
            .map { it.toString().toInt() }
            .sum()
    }

    // 1212 produces 6: the list contains 4 items, and all four digits match the digit 2 items ahead.
    @Test
    fun `sum of matching 1212 is 6`() {
        assertThat(sumOfMatchingAround("1212")).isEqualTo(6)
    }

    // 1221 produces 0, because every comparison is between a 1 and a 2.
    @Test
    fun `sum of matching 1221 is 0`() {
        assertThat(sumOfMatchingAround("1221")).isEqualTo(0)
    }

    // 123425 produces 4, because both 2s match each other, but no other digit has a match.
    @Test
    fun `sumOfMatchingAround 123425 is 4`() {
        assertThat(sumOfMatchingAround("123425")).isEqualTo(4)
    }

    // 123123 produces 12.
    @Test
    fun `sumOfMatchingAround 123123 is 12`() {
        assertThat(sumOfMatchingAround("123123")).isEqualTo(12)
    }

    // 12131415 produces 4.
    @Test
    fun `sumOfMatchingAround 12131415 is 4`() {
        assertThat(sumOfMatchingAround("12131415")).isEqualTo(4)
    }

    @Test
    fun `sumOfMatchingAround testInput is 1232`() {
        assertThat(sumOfMatchingAround(testInput)).isEqualTo(1232)
    }

    private val testInput =
        "8231753674683997878179259195565332579493378483264978184143341284379682788518559178822225126625428318115396632681141871952894291898364781898929292614792884883249356728741993224889167928232261325123447569829932951268292953928766755779761837993812528527484487298117739869189415599461746944992651752768158611996715467871381527675219481185217357632445748912726487669881876129192932995282777848496561259839781188719233951619188388532698519298142112853776942545211859134185231768952888462471642851588368445761489225786919778983848113833773768236969923939838755997989537648222217996381757542964844337285428654375499359997792679256881378967852376848812795761118139288152799921176874256377615952758268844139579622754965461884862647423491918913628848748756595463191585555385849335742224855473769411212376446591654846168189278959857681336724221434846946124915271196433144335482787432683848594487648477532498952572515118864475621828118274911298396748213136426357769991314661642612786847135485969889237193822718111269561741563479116832364485724716242176288642371849569664594194674763319687735723517614962575592111286177553435651952853878775431234327919595595658641534765455489561934548474291254387229751472883423413196845162752716925199866591883313638846474321161569892518574346226751366315311145777448781862222126923449311838564685882695889397531413937666673233451216968414288135984394249684886554812761191289485457945866524228415191549168557957633386991931186773843869999284468773866221976873998168818944399661463963658784821796272987155278195355579386768156718813624559264574836134419725187881514665834441359644955768658663278765363789664721736533517774292478192143934318399418188298753351815388561359528533778996296279366394386455544446922653976725113889842749182361253582433319351193862788433113852782596161148992233558144692913791714859516653421917841295749163469751479835492713392861519993791967927773114713888458982796514977717987598165486967786989991998142488631168697963816156374216224386193941566358543266646516247854435356941566492841213424915682394928959116411457967897614457497279472661229548612777155998358618945222326558176486944695689777438164612198225816646583996426313832539918"
}
