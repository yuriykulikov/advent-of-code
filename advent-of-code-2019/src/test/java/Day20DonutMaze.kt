import kotlinx.collections.immutable.PersistentMap
import kotlinx.collections.immutable.PersistentSet
import kotlinx.collections.immutable.persistentSetOf
import kotlinx.collections.immutable.toPersistentMap
import org.assertj.core.api.Java6Assertions.assertThat
import org.junit.Test

class Day20DonutMaze {

    @Test
    fun `print portals`() {
        Walker(smallMaze).printPortals()
    }

    @Test
    fun `labels are read left to right and top to bottom`() {
        val walker = Walker(biggerMaze)
        walker.printPortals()
        assertThat(walker.portals.values.map { it.label }.distinct())
            .contains(
                "DI",
                "JO",
                "YN",
                "BU",
                "JP",
                "CP",
                "QG",
                "LF",
                "AS",
                "VT"
            )
    }

    @Test
    fun silverTestRipples() {
        Walker(smallMaze, dbg = true).findPathWithRipples().let { assertThat(it).isEqualTo(23) }
    }

    @Test
    fun silverTestRipplesBigger() {
        Walker(biggerMaze).findPathWithRipples().let { assertThat(it).isEqualTo(58) }
    }

    @Test
    fun silverRipples() {
        Walker(taskMaze).findPathWithRipples().let { assertThat(it).isEqualTo(626) }
    }

    @Test
    fun goldTest() {
        Walker(testRecursiveMaze, dbg = true, recursiveMode = true).findPathWithRipples()
            .let { assertThat(it).isEqualTo(396) }
    }

    @Test
    fun gold() {
        Walker(taskMaze, recursiveMode = true).findPathWithRipples().let { assertThat(it).isEqualTo(6912) }
    }

    @Test
    fun goldVerifyPortals() {
        val walker = Walker(taskMaze)
        assertThat(
            walker.portals.values.count { portal -> portal.direction == 1 }
        ).isEqualTo(
            walker.portals.values.count { portal -> portal.direction == -1 }
        )

        // all balanced
        assertThat(walker.portals.values.groupBy { it.label }
            .values
            .map { portals -> portals.sumBy { it.direction } })
            .containsOnly(0)
    }

    private data class Wave(val points: PersistentSet<Point>, val front: List<Point>, val iterations: Int)

    data class Portal(
        val label: String,
        val enter: Point,
        val exit: Point,
        val direction: Int
    )

    class Walker(
        mapString: String,
        private val dbg: Boolean = false,
        private val recursiveMode: Boolean = false
    ) {
        private val map: PersistentMap<Point, Char>
        private val z: Point
        private val aa: Point
        private val start: Point
        val portals: Map<Point, Portal>

        private fun Point.value(): Char {
            check(z == 0) { "Bad point $this" }
            return map.getOrDefault(this, ' ')
        }

        private fun Point.surroundings(): List<Point> = listOf(
            left().copy(z = z),
            up().copy(z = z),
            right().copy(z = z),
            down().copy(z = z)
        )

        init {
            map = parseMap(mapString = mapString)
                .mapValues { (k, v) -> if (v == '.') ' ' else v }
                .toPersistentMap()
            val allPortals = findPortals(map)
            z = allPortals.values.first { portal -> portal.label == "ZZ" }.enter
            aa = allPortals.values.first { portal -> portal.label == "AA" }.enter
            start = allPortals.values.first { portal -> portal.label == "AA" }.exit
            portals = allPortals.minus(z).minus(aa)
        }

        companion object {

            private fun findPortals(map: PersistentMap<Point, Char>): Map<Point, Portal> {
                fun Point.value(): Char = map.getOrDefault(this, ' ')
                fun Point.surroundings(): List<Point> = listOf(left(), up(), right(), down())

                val maxX = map.keys.map { it.x }.max() ?: 0
                val maxY = map.keys.map { it.y }.max() ?: 0

                return map.entries
                    .filter { (_, v) -> v.isLetter() }
                    .filter { (point, _) ->
                        point.up().left().value() == '#'
                                || point.up().right().value() == '#'
                                || point.down().left().value() == '#'
                                || point.down().right().value() == '#'
                    }
                    .map { (point, _) ->
                        val outerPoint = point.surroundings().first { it.value().isLetter() }
                        val vector = outerPoint.minus(point)
                        val label =
                            listOf(point, outerPoint).sortedBy { it.x + it.y }.map { it.value() }.joinToString("")
                        val exit = outerPoint - vector - vector

                        val direction: Int = when {
                            label == "AA" -> 0
                            label == "ZZ" -> 0
                            outerPoint.x == maxX -> -1
                            outerPoint.y == maxY -> -1
                            outerPoint.x == 0 -> -1
                            outerPoint.y == 0 -> -1
                            else -> 1
                        }

                        Portal(label = label, exit = exit, enter = point, direction = direction)
                    }
                    .map { portal -> portal.enter to portal }
                    .toMap()
            }
        }

        fun printPortals() {
            printMap(tiles = map, invertedY = true) { "${it ?: " "}" }
            printMap(tiles = map.putAll(portals.mapValues { 'o' }), invertedY = true) { "${it ?: " "}" }
        }

        data class Multiwave(
            val points: PersistentSet<Point>, val ripples: List<Ripple>
        )

        data class Ripple(
            val front: Point,
            val iterations: Int
        )

        fun findPathWithRipples(): Int {

            if (dbg) printMap(tiles = map, invertedY = true) { "${it ?: " "}" }

            val lastWave: Multiwave = reachOutWithRipples(start)
                // .drop(10)
                // .take(10)
                .onEach { wave ->
                    if (dbg) {
                        println(z)
                        printDecision(Wave(points = wave.points, iterations = 0, front = wave.ripples.map { it.front }))
                    }
                }
                .first { wave -> wave.ripples.any { it.front == z } }

            return lastWave.ripples
                .filter { it.front == z }
                .minBy { it.iterations }
                ?.iterations
                ?.minus(1)
                ?: 0
        }

        /** A wave starting at [start] and going in all directions unless it encounters a closed door, a wall, or a new key */
        private fun reachOutWithRipples(start: Point): Sequence<Multiwave> {
            val visited = when {
                recursiveMode -> persistentSetOf(start)
                    // block portals on level 0 which go shallower
                    .addAll(portals.values.filter { it.direction == -1 }.map { it.enter })
                else -> persistentSetOf(start)
            }
            val seed = Multiwave(points = visited, ripples = listOf(Ripple(start, iterations = 0)))
            return generateSequence(seed) { wave: Multiwave ->

                val newRipples: List<Ripple> = wave.ripples.flatMap { ripple ->
                    ripple.front.surroundings()
                        .asSequence()
                        .filter { point -> point !in wave.points }
                        .filter { point ->
                            val value = point.copy(z = 0).value()
                            when {
                                value == '#' -> false
                                value == ' ' -> true
                                point.copy(z = 0) in portals.keys -> true // can go into any portal
                                point == z && point.z == 0 -> true // exit from the maze
                                else -> false
                            }
                        }
                        .map { point ->
                            when (point.copy(z = 0)) {
                                in portals.keys -> goIntoPortal(point)
                                else -> point
                            }
                        }
                        .filter { point -> point !in wave.points }
                        .map { newFront -> Ripple(newFront, ripple.iterations + 1) }
                        .toList()
                }

                when {
                    newRipples.isNotEmpty() -> Multiwave(
                        points = wave.points.addAll(newRipples.map { it.front }),
                        ripples = newRipples
                    )
                    else -> null
                }
            }
        }

        private fun goIntoPortal(point: Point): Point {
            val goingIn = portals.getValue(point.copy(z = 0))
            if (dbg) println("Going in $goingIn at $point")
            return portals.values.filter { portal -> portal.label == goingIn.label }
                .minus(goingIn)
                .apply { check(size == 1) { "Cannot find matching portal exit for $goingIn" } }
                .first()
                .exit
                .run {
                    if (recursiveMode) {
                        this.copy(z = point.z + goingIn.direction)
                    } else {
                        this
                    }
                }.also {
                    if (dbg) println("Out at $it")
                }
        }

        /**
         * Prints the map with available points and the reach
         */
        private fun printDecision(wave: Wave) {
            val toPrint = map
                .putAll(wave.points.map {
                    it.copy(z = 0) to when (it.z) {
                        0 -> '.'
                        1 -> '+'
                        2 -> '-'
                        3 -> '*'
                        4 -> '/'
                        5 -> '%'
                        6 -> '&'
                        7 -> '|'
                        else -> '$'
                    }
                }.toMap())
                .putAll(wave.front.map { it.copy(z = 0) to 'X' }.toMap())
            printMap(tiles = toPrint, invertedY = true) { "${it ?: ' '}" }
            println()
        }
    }
}

val smallMaze = """
         A
         A
  #######.#########
  #######.........#
  #######.#######.#
  #######.#######.#
  #######.#######.#
  #####  B    ###.#
BC...##  C    ###.#
  ##.##       ###.#
  ##...DE  F  ###.#
  #####    G  ###.#
  #########.#####.#
DE..#######...###.#
  #.#########.###.#
FG..#########.....#
  ###########.#####
             Z
             Z
    """.trimIndent()

val biggerMaze = """
                   A
                   A
  #################.#############
  #.#...#...................#.#.#
  #.#.#.###.###.###.#########.#.#
  #.#.#.......#...#.....#.#.#...#
  #.#########.###.#####.#.#.###.#
  #.............#.#.....#.......#
  ###.###########.###.#####.#.#.#
  #.....#        A   C    #.#.#.#
  #######        S   P    #####.#
  #.#...#                 #......VT
  #.#.#.#                 #.#####
  #...#.#               YN....#.#
  #.###.#                 #####.#
DI....#.#                 #.....#
  #####.#                 #.###.#
ZZ......#               QG....#..AS
  ###.###                 #######
JO..#.#.#                 #.....#
  #.#.#.#                 ###.#.#
  #...#..DI             BU....#..LF
  #####.#                 #.#####
YN......#               VT..#....QG
  #.###.#                 #.###.#
  #.#...#                 #.....#
  ###.###    J L     J    #.#.###
  #.....#    O F     P    #.#...#
  #.###.#####.#.#####.#####.###.#
  #...#.#.#...#.....#.....#.#...#
  #.#####.###.###.#.#.#########.#
  #...#.#.....#...#.#.#.#.....#.#
  #.###.#####.###.###.#.#.#######
  #.#.........#...#.............#
  #########.###.###.#############
           B   J   C
           U   P   P
""".trimIndent()

val testRecursiveMaze = """
             Z L X W       C
             Z P Q B       K
  ###########.#.#.#.#######.###############
  #...#.......#.#.......#.#.......#.#.#...#
  ###.#.#.#.#.#.#.#.###.#.#.#######.#.#.###
  #.#...#.#.#...#.#.#...#...#...#.#.......#
  #.###.#######.###.###.#.###.###.#.#######
  #...#.......#.#...#...#.............#...#
  #.#########.#######.#.#######.#######.###
  #...#.#    F       R I       Z    #.#.#.#
  #.###.#    D       E C       H    #.#.#.#
  #.#...#                           #...#.#
  #.###.#                           #.###.#
  #.#....OA                       WB..#.#..ZH
  #.###.#                           #.#.#.#
CJ......#                           #.....#
  #######                           #######
  #.#....CK                         #......IC
  #.###.#                           #.###.#
  #.....#                           #...#.#
  ###.###                           #.#.#.#
XF....#.#                         RF..#.#.#
  #####.#                           #######
  #......CJ                       NM..#...#
  ###.#.#                           #.###.#
RE....#.#                           #......RF
  ###.###        X   X       L      #.#.#.#
  #.....#        F   Q       P      #.#.#.#
  ###.###########.###.#######.#########.###
  #.....#...#.....#.......#...#.....#.#...#
  #####.#.###.#######.#######.###.###.#.#.#
  #.......#.......#.#.#.#.#...#...#...#.#.#
  #####.###.#####.#.#.#.#.###.###.#.###.###
  #.......#.....#.#...#...............#...#
  #############.#.#.###.###################
               A O F   N
               A A D   M
""".trimIndent()

val taskMaze = """
                                       T   L           B   P       C       B Z           M
                                       I   P           A   P       U       N Z           S
  #####################################.###.###########.###.#######.#######.#.###########.###################################
  #.......#.....#...#.....#.#.#.....#.#.#.........#.......#.....#.....#.#.....#.#...#.#.....#...#.....#.#.....#.#.#...#.....#
  ###.#######.#.###.#.#.###.#.#.#####.#.#########.#.#.#.#####.#####.###.###.###.#.###.#.#####.###.#####.###.###.#.#.###.#.###
  #.#.#.#...#.#...#...#...#.#.#.#.........#...#...#.#.#.....#.#.#.........#.........#.#.......#.....#...#...#.#.......#.#...#
  #.#.#.#.#######.#######.#.#.#.#######.###.###.###.###.#.###.#.#.###.#########.#.###.###.###.#.#####.###.###.#.#########.###
  #.......#.#...#...#.......#.......#.....#...#...#.#.#.#.#.....#.#.....#.#.#...#...#...#...#.........#...#.......#.#...#...#
  #####.###.###.#.#########.#.#.#######.###.#.#.#.#.#.#####.#.#.###.#####.#.#.#######.#.#.#####.###.#####.#.###.#.#.###.#.#.#
  #...#...#.#...........#.#.#.#...#.#.....#.#.#.#.#.......#.#.#...#.........#...#.#...#.....#.....#.#.#.......#.#.#.#.....#.#
  #.#.#.###.###.###.###.#.#.###.###.#####.#.#.###.#.#############.#######.#####.#.#.#######.#####.###.#.#.###.#####.###.#.###
  #.#...#.#.#...#...#.....................#.#...#.#.#.#...........#...........#...#.......#.#...#.#.#...#.#.....#.#.#...#...#
  ###.#.#.#.###.###.#######.#.#.#######.###.###.#.#.#.#####.#.#.###.###.#.#######.#.###.#.#####.###.#.#######.###.#.###.###.#
  #.#.#.#...#.#.#.#.#.#.#.#.#.#.....#...#.....#...#...#.#...#.#.#.#.#.#.#...#.#...#...#.#...#.#.#.....#.#...#...#.#.#.#...#.#
  #.#.###.###.###.###.#.#.#.###.#######.###.#.#####.###.###.#.###.#.#.###.###.###.#.#####.###.#.#.#####.#.#######.#.#.#.#####
  #...#...#...#...#...#.......#.#.#...#...#.#.....#.#.#.....#.#.#.......#...#.....#.....#.............#.....#...#...#.#...#.#
  ###.###.###.###.###.#.###.#####.###.#.#######.#.#.#.#####.###.###.#####.###.###.#.#####.#####.#######.#######.#.###.###.#.#
  #...#.....#...#.......#...#.#.#...#.........#.#.#.#...#.......#...#.#.....#...#.#.#.......#.....#...#.........#...#...#...#
  ###.###.###.#####.###.#.#.#.#.#.###.#.#.#######.#.#.#####.#.#####.#.#######.###.#####.#.###.###.#.###.#########.###.#####.#
  #.#.#.#...#...#.#...#.#.#.#.....#.#.#.#.#...#.#.#.......#.#.#...........#...#.....#...#.#.....#.........#.....#.#.........#
  #.#.#.###.#.###.###############.#.###.#####.#.#.#.###.#####.#######.###########.#.#####.#######.#.###.#.###.###.###.#######
  #.#.#.#.......#...#.....#.#...#.......#.........#.#.#.#.....#...#...#.......#...#.#.#.........#.#.#...#.#.#.#.#.#.........#
  #.#.#.###.#.#####.###.###.###.#.#####.###.#######.#.###.#.#####.#.#####.#######.###.#.###########.#.#.###.#.#.#.###.#######
  #.........#.#.......#.#.#.......#.......#.....#.#.....#.#.#.#...........#.........#.............#.#.#.#.#.......#.....#.#.#
  #####.###.#######.###.#.#######.#.#.#.###.###.#.###.#####.#.#.#####.#.#########.#######.#.#####.#######.###.###.#.#####.#.#
  #...#.#.....#.#.....#.#...#...#.#.#.#...#.#.#...#.......#.#.#.#.....#.#.#...#...#.....#.#.....#...#.....#.#.#...#.....#.#.#
  ###.#.#######.###.#.#.#.###.###########.###.###.#.#.#####.#.###.#.#####.###.###.#.#.###.#############.###.#####.#####.#.#.#
  #...#...#.#...#...#.#.....#...........#.#.#.....#.#...#.....#...#.....#.........#.#...#.#.#.....#.#.....#.....#.........#.#
  ###.#.###.###.#.#####.#####.###.#####.#.#.#####.#.#######.#########.#######.#.###.###.#.#.#.#####.#####.###.###.#####.###.#
  #...#...#.#...#...#.#...#...#.....#...#...#...#.#.#.....#...#.#.#.........#.#.#...#.#.............#...........#.....#.#...#
  ###.#.###.###.#.###.#.###############.#.###.###.#.#.###.#.###.#.#.###.#######.###.#.###.#.#.#############.#####.###.###.###
  #...#.....#.....#.....#...#.#.......#...#.#...#.#...#.#.#.#...#.....#.#...#.....#.....#.#.#.#.#.#.#.#.....#.......#.#.....#
  #.#####.###.#.#######.#.###.#######.###.#.#.#.#.#.###.#.#.###.#####.#####.###.#.###.###.#####.#.#.#.###.#.#####.#######.#.#
  #.....#...#.#...#.#.#...#...#.....#.....#...#...#.#.....#.....#.....#.........#.#.....#...#.....#...#...#.#.#...#.#.....#.#
  ###.#.#.###.#####.#.#.#.#.#####.#####.#####.#######.#########.###.#########.#########.#####.#.#####.#####.#.###.#.#####.###
  #.#.#...#.#...#.#...#.#.#.#.#...#    F     I       C         B   B         J         K    #.#.#...#.....#...#...#...#.....#
  #.#####.#.#.###.###.###.#.#.###.#    X     O       U         A   N         J         N    ###.#.#####.###.#####.###.###.###
  #.........................#.....#                                                         #.....#.........#.......#.....#.#
  #.#.#.#####.#############.#.###.#                                                         ###.#.#.###.###.#.#####.#.#.###.#
  #.#.#.....#.#.#...#...#...#...#.#                                                         #...#.....#.#.....#.....#.#.#....QD
  #.#.#.#######.###.#.#.#.###.#.#.#                                                         ###.#####.#######.#####.#.#.###.#
MX..#.#...#.#.....#...#...#...#.#..PP                                                     TI..#.....#.#...#...#.#.....#...#.#
  #####.###.###.###.#.#########.#.#                                                         #.###.###.#.#.#####.#########.#.#
  #...#...#...#.#.#.#...........#.#                                                         #.....#.#.#.#.#...#...#.#...#...#
  #.#######.###.#.#################                                                         #######.###.#####.#.###.#.#######
  #.......#...................#.#.#                                                       QD..........#...................#..HM
  #.#.###.#.#.#.#######.#.###.#.#.#                                                         #.###.###.#.#.#.###########.###.#
  #.#...#...#.#.#...#...#...#.....#                                                         #...#...#...#.#.#...#.....#...#.#
  #####.#.#.###.#.#.#######.###.#.#                                                         #.###.#####.#######.#.#.###.###.#
  #.....#.#...#...#.#.#...#.#...#.#                                                       LP..#...#...#.#.........#.....#....OL
  #.#.###.###########.#.#######.###                                                         #########.#####.###.#########.#.#
HG..#.#...#.#...#.#...#...#...#....DY                                                       #...#.........#.#.............#.#
  #.#######.###.#.#.###.###.#######                                                         #.#####.#.#.#####################
  #.#.....................#...#...#                                                         #.....#.#.#.....#...#.....#......FG
  ###.#######.#.#.#.#.#.#.#.#.#.#.#                                                         #####.###.#########.#.#.###.#.###
  #...#.....#.#.#.#.#.#.#...#...#.#                                                         #.....#.#...#.#.#.#...#...#.#...#
  ###.###.#.#####.###.#####.#####.#                                                         #####.#.#.###.#.#.#.#####.#.#.###
  #.......#...#.....#...#.....#.#.#                                                       QQ....................#.#.#...#...#
  #########.#.#.#.###.###.#.#.#.#.#                                                         #####.###############.#.#.#####.#
AJ..........#.#.#...#.#...#.#.#....OL                                                     WP..#...#.................#.#.#.#.#
  ###############.#########.###.#.#                                                         #.#######.###.#.###.###.###.#.###
LQ..#.........#.........#.#.#.#.#.#                                                         #.....#.....#.#...#...#.....#....FN
  #.#.#.#################.###.#####                                                         #.#.#####.#.###.###########.###.#
  #...#.....#.......#.#.#.#.#.....#                                                         #.#.#.....#.#...#...#.#.#...#...#
  #.#.#.#.#.###.#.###.#.#.#.#####.#                                                         ###.#.#####.###.###.#.#.#.###.#.#
  #.#.#.#.#.#.#.#...#.#.....#.#.#..HM                                                       #.#...#.#.#.#.#.#...#.#.#.....#.#
  ###.#.###.#.#.#####.#####.#.#.#.#                                                         #.#####.#.###.#####.#.#.#########
  #.#.#.#.#.......................#                                                       AJ..#.......................#.....#
  #.#####.#######################.#                                                         #.#.###.#.#.###.###.#####.#.###.#
QQ......................#.......#.#                                                         #.....#.#.#.#.....#.#.......#...#
  #.#####.###.#####.#.###.#####.###                                                         #.#####.#.#######.#######.###.###
  #.#.#.#.#.....#...#...#.#.....#..IC                                                       #.#...#.#.....#...#.....#.#.#.#.#
  #.#.#.#.#.#########.###.#.#####.#                                                         ###.#############.#.#.#####.#.#.#
  #.#.#.#.#.#.............#.....#.#                                                         #...#.#.....#...#.#.#.......#....DY
  ###.#.###########.###########.#.#                                                         #.###.#.#####.#########.#########
  #.#.....#.#.#.#.#.#.#...#...#...#                                                       MX....#.......#.................#..IO
  #.###.###.#.#.#.###.###.###.###.#                                                         ###.#.#####.#.###.#.###.#.#.#.#.#
RW..#.....#...................#...#                                                         #...#...#.#...#...#.#...#.#.#.#.#
  #.#.#.#.###.###.#####.#.#.#######                                                         #.###.###.#.###.#####.#.#####.#.#
  #.#.#.#.....#.......#.#.#...#....LQ                                                       #...#.#.#.....#.....#.#.#.......#
  #.#.#####.#.#####.#####.#.#.###.#                                                         ###.#.#.#######.###########.###.#
  #.......#.#.#.#.......#.#.#.#...#                                                         #...........#...#.......#...#...#
  #.#.#######.#.###.#.###.###.###.#                                                         ###.#.#####.###.#.#######.#####.#
  #.#.....#...#.#...#.#...#.......#                                                         #...#.....#.#.....#...#...#.....#
  ###.#####.#.#.###.#####.###.###.#    F         H       U       I     R     F         M    #.#######.#.###.#.#.###########.#
  #...#...#.#.#.........#.#.....#.#    G         G       S       F     W     N         S    #.....#.#.#.#.#.#.......#.......#
  ###.#.#####.###.###.###.#.#####.#####.#########.#######.#######.#####.#####.#########.#######.###.###.#.#.#####.#.#######.#
  #.........#...#.#...#.#.#.#.#...#.......#.......#.#.#.....#.....#.........#.#.............#...#.......#...#.#...#.#.......#
  #.###.#############.#.###.#.#.#.###.###.#####.###.#.#.#####.###########.###.###.###############.#.#####.#.#.###.#####.###.#
  #.#...#.......#.........#.#...#...#...#...#.....#.....#.#.......#...#.#...#.#.#.#...........#.#.#.#.....#...#.#.#.#...#...#
  #.###.#.#####.#.#.###.#######.#####.#####.#.#.#####.#.#.###.###.###.#.#.###.#.#.#.###.#.###.#.###.###.#.###.#.###.###.###.#
  #.#.#.#.#.#.....#.#.....#.#.#...#.....#.#.#.#...#...#.#...#.#.....#.......#...#.#...#.#.#.....#.#...#.#.#.........#.....#.#
  ###.#####.###.#.#####.###.#.###.###.#.#.#####.#####.###.#########.#.#.###.#.#.#.#.###.#.###.###.#.#########.#.#.#########.#
  #.#...........#.#.......#...#...#...#.#.....#.#.#...#.#...#.......#.#...#.#.#.#...#...#...#...#.....#...#...#.#.#.#.#.#...#
  #.#.###.#.#.#.###########.#########.#######.#.#.#.#.###.#.#.###########.#####.#####.#.#.#.#############.#.#.###.#.#.#.###.#
  #...#...#.#.#.#...#...#.....#...#.....#.........#.#.#...#.#.....#.#.....#.#.......#.#.#.#.#.#.#...#.....#.#.#.......#.....#
  #.###.#####.#.###.###.###.#####.###.#####.#.###.###.#.###.#.#####.#.#.###.###.#.#####.#####.#.#.###.#####.#.###.#.###.###.#
  #.#...#.....#...#...................#...#.#...#...#.....#.#.......#.#.....#...#.#.#.#...#.#.#.........#.#.#.#...#.#...#.#.#
  #####.#####.#####.#.###.#.#.#.#.###.#.#####.#############.#.#.###.#####.#####.###.#.#.#.#.#.###.###.#.#.###.###.#####.#.###
  #.....#...#.#.....#...#.#.#.#.#...#.....#...#.#.#.........#.#.#...#.#...#.#.....#.#...#...#.#...#.#.#.#...#.#.#.....#.....#
  #.###.###.#######.#.#######.###.###.#######.#.#.###.###.#######.###.#.###.###.###.###.#####.#.###.#####.###.#.###.###.###.#
  #.#...#...#.#.....#.#.#.....#.#.#...#.#...#...#.....#.........#.....#...#.#.#.......#...........#.......#.......#...#.#...#
  #.#.#####.#.#####.###.#.###.#.#.###.#.#.###.#.#####.###.#########.###.###.#.#.#.#####.###.#########.#.#.#.###.#######.#.###
  #.#.#...............#...#.#...#.#.........#.#.....#.#.#.#.#.#.#...#.....#.#...#...#.....#...........#.#.#.#.........#.#.#.#
  #.###.#.###.#.#.#.###.#.#.###.#####.###.#.#.#######.#.###.#.#.#.#######.#.#.###.#####.#####.###.###.#.#.#####.#######.###.#
  #...#.#.#...#.#.#.#...#.#.#.#.#.....#...#.#.....#.....#.....#.......#...#...#.#.#.........#...#...#.#.#...#.........#.#.#.#
  #.#########.###.#.#######.#.#######.#####.###.#####.#.###.#.#####.#.###.#.###.#.###.###.###.###.#####.#########.###.###.#.#
  #.....#.......#.#.#.....#.#.#.#.#.#.#...#...#...#...#.#...#.#.#...#...#.#...#.#.#.#...#...#.#.....#...........#...#.......#
  #.#.#######.#####.#####.#.#.#.#.#.###.#.#.###.#####.#####.###.#.#######.###.#.###.#.#.#############.#.###.#.#.#######.#####
  #.#...#...#.#.....#.........#.........#.#...#...#.......#...#.....#.#...#.....#.#...#...........#.#.#...#.#.#.......#.....#
  #.#####.#####.#.#########.###.#.###.###.#.###.#.###.###.#.#######.#.#.###.#####.###.#.#.#.#.#.#.#.###.###.###.###.#########
  #.#...#.#.#...#.#.....#.....#.#...#.#.#.....#.#...#.#.#...#.#...#...#...#.....#.#...#.#.#.#.#.#.....#...#...#.#.....#...#.#
  #.###.#.#.###.###.#####.###.###.###.#.#########.#####.###.#.#.#.#.###.#.###.###.###.#.#####.###.#.###.###.###.#####.#.###.#
  #.#...........#.....#.#.#.#...#.#...#.....#.....#.#.#...#...#.#.....#.#.#.........#.#...#...#.#.#.#...#.....#...#.........#
  #.###.#########.#.#.#.###.#.#######.###.#.###.###.#.###.#.#####.#.#####.#####.#######.#######.#######.###.#.#.#.#.#.###.#.#
  #.#.....#.......#.#.................#...#...#.....#.......#.....#...#.....#.#.#.#.#...#.........#.......#.#.#.#.#.#.#...#.#
  #.#######.#.###.#.#.###.#.#.#.###.#.#.###.#######.#.#############.###.#####.#.#.#.###.#.#####.#.###.###.#####.#.###.#####.#
  #.#.......#.#...#.#.#...#.#.#.#...#...#...#.......#.........#.....#.........#.#.............#.#.#.....#...#...#...#...#...#
  #########################################.#.###########.#######.###.###.#####.###.#########################################
                                           I I           J       W   K   A     U   F
                                           F C           J       P   N   A     S   X
""".trimIndent()